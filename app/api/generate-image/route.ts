import { NextRequest, NextResponse } from 'next/server'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–≥–¥–∞ ClipDrop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
function generateMockImage(prompt: string): string {
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º prompt
  const svg = `
    <svg width="512" height="512" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient id="bg" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
          <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
        </linearGradient>
      </defs>
      <rect width="512" height="512" fill="url(#bg)"/>
      <rect x="20" y="20" width="472" height="472" rx="20" fill="white" fill-opacity="0.1"/>
      <text x="256" y="200" font-family="Arial, sans-serif" font-size="24" font-weight="bold"
            text-anchor="middle" fill="white">üé® Mock Image</text>
      <text x="256" y="250" font-family="Arial, sans-serif" font-size="16"
            text-anchor="middle" fill="white" opacity="0.8">ClipDrop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</text>
      <text x="256" y="300" font-family="Arial, sans-serif" font-size="14"
            text-anchor="middle" fill="white" opacity="0.6">–ó–∞–ø—Ä–æ—Å: ${prompt.substring(0, 40)}${prompt.length > 40 ? '...' : ''}</text>
      <text x="256" y="350" font-family="Arial, sans-serif" font-size="12"
            text-anchor="middle" fill="white" opacity="0.4">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å ClipDrop</text>
    </svg>
  `

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ base64
  const base64 = Buffer.from(svg).toString('base64')
  return `data:image/svg+xml;base64,${base64}`
}

export async function POST(request: NextRequest) {
  try {
    const { prompt } = await request.json()

    if (!prompt || typeof prompt !== 'string') {
      return NextResponse.json(
        { error: 'Prompt is required and must be a string' },
        { status: 400 }
      )
    }

    const apiKey = process.env.CLIPDROP_API_KEY
    if (!apiKey) {
      return NextResponse.json(
        { error: 'ClipDrop API key not configured' },
        { status: 500 }
      )
    }

    console.log('Generating image with prompt:', prompt)
    console.log('API key available:', !!apiKey)
    console.log('API key length:', apiKey.length)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ API route
    const formData = new FormData()
    formData.append('prompt', prompt)

    const response = await fetch('https://clipdrop-api.co/text-to-image/v1', {
      method: 'POST',
      headers: {
        'x-api-key': apiKey,
      },
      body: formData,
    })

    if (!response.ok) {
      let userFriendlyMessage = `ClipDrop API error: ${response.status}`

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
      switch (response.status) {
        case 402:
          userFriendlyMessage = '–ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ ClipDrop –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞.'
          break
        case 401:
          userFriendlyMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á ClipDrop. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'
          break
        case 429:
          userFriendlyMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          break
        case 400:
          userFriendlyMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ ClipDrop API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è.'
          break
        default:
          userFriendlyMessage = `ClipDrop API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${response.status} - ${response.statusText})`
      }

      console.error('ClipDrop API error:', response.status, response.statusText)

      // –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º fallback
      if (response.status === 402) {
        return NextResponse.json(
          {
            error: userFriendlyMessage,
            fallback: true,
            mockImageUrl: generateMockImage(prompt)
          },
          { status: 200 } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å fallback
        )
      }

      return NextResponse.json(
        { error: userFriendlyMessage },
        { status: 500 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ blob
    const imageBlob = await response.blob()

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–ª–∏–µ–Ω—Ç—É
    const buffer = await imageBlob.arrayBuffer()
    const base64 = Buffer.from(buffer).toString('base64')
    const dataUrl = `data:${imageBlob.type || 'image/png'};base64,${base64}`

    return NextResponse.json({
      success: true,
      imageUrl: dataUrl
    })
  } catch (error) {
    console.error('Image generation API error:', error)
    return NextResponse.json(
      { error: 'Failed to generate image' },
      { status: 500 }
    )
  }
}
