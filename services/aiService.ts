interface AIMessage {
  role: 'system' | 'user' | 'assistant'
  content: string
}

class AIService {
  private openrouterKeys: string[]
  private groqKey: string
  private huggingfaceToken: string
  private currentKeyIndex: number = 0

  constructor() {
    this.openrouterKeys = process.env.OPENROUTER_API_KEYS?.split(',') || []
    this.groqKey = process.env.GROQ_API_KEY || ''
    this.huggingfaceToken = process.env.HUGGINGFACE_TOKEN || ''

    // Debug logging
    console.log('AI Service initialized:')
    console.log('- OpenRouter keys count:', this.openrouterKeys.length)
    console.log('- Groq key available:', !!this.groqKey)
    console.log('- HuggingFace token available:', !!this.huggingfaceToken)
  }

  private getNextOpenRouterKey(): string {
    if (this.openrouterKeys.length === 0) {
      throw new Error('No OpenRouter API keys available')
    }
    
    const key = this.openrouterKeys[this.currentKeyIndex]
    this.currentKeyIndex = (this.currentKeyIndex + 1) % this.openrouterKeys.length
    return key
  }

  private validateRussianResponse(response: string): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–µ –∏–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    const cleanResponse = response
      .replace(/[^\u0400-\u04FF\u0500-\u052F\s\d\p{P}]/gu, '') // –£–¥–∞–ª—è–µ–º –Ω–µ-–∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –ø—Ä–æ–±–µ–ª–æ–≤, —Ü–∏—Ñ—Ä –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
      .replace(/\s+/g, ' ') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      .trim()

    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    if (cleanResponse.length < 10) {
      return '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä'
    }

    return cleanResponse
  }

  private async makeOpenRouterRequest(messages: AIMessage[]): Promise<string> {
    const systemPrompt: AIMessage = {
      role: 'system',
      content: `–¢—ã Jarvis - –ø—Ä–æ—Å—Ç–æ–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫.

–ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û:
- –û—Ç–≤–µ—á–∞–π –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ö–û–†–û–¢–ö–û –∏ –ï–°–¢–ï–°–¢–í–ï–ù–ù–û
- –ö–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ
- –ù–ò–ö–û–ì–î–ê –Ω–µ –∑–∞–¥–∞–≤–∞–π –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
- –û–î–ò–ù –æ—Ç–≤–µ—Ç = –û–î–ù–ê –º—ã—Å–ª—å

–ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ò–• –û–¢–í–ï–¢–û–í:
- "–ü—Ä–∏–≤–µ—Ç!" / "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
- "–û—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è –∫–∞–∫?"
- "–ö–æ–Ω–µ—á–Ω–æ, –ø–æ–º–æ–≥—É!"
- "–ù–µ –∑–Ω–∞—é, –Ω–æ –º–æ–≥—É –ø–æ–∏—Å–∫–∞—Ç—å"

–ü–†–ò–ú–ï–†–´ –ü–õ–û–•–ò–• –û–¢–í–ï–¢–û–í:
- "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞–¥ –≤–∏–¥–µ—Ç—å! –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ê –∫–∞–∫ —Ç—ã?"
- –î–ª–∏–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
- –ú–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

–Ø–ó–´–ö:
- –¢–û–õ–¨–ö–û —Ä—É—Å—Å–∫–∏–π –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
- –ü—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞
- –ö–∞–∫ –≤ –æ–±—ã—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ

–¢–ï–ú–´: –æ—Ç–≤–µ—á–∞–π –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ –¥–µ–ª—É.`
    }

    const allMessages = [systemPrompt, ...messages]

    // –°–∞–º—ã–µ —É–º–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
    const models = [
      'meta-llama/llama-3.1-8b-instruct:free', // –¢–æ–ø –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è LLaMA 3.1
      'microsoft/wizardlm-2-8x22b:free',       // –°—É–ø–µ—Ä —É–º–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è
      'openchat/openchat-7b:free',              // –û—á–µ–Ω—å —É–º–Ω–∞—è –¥–ª—è —á–∞—Ç–∞
      'huggingface/zephyr-7b-beta:free',        // –û—Ç–ª–∏—á–Ω–∞—è ÔøΩÔøΩ–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
      'mistralai/mistral-7b-instruct:free',     // –ù–∞–¥–µ–∂–Ω–∞—è Mistral
      'gryphe/mythomist-7b:free',               // –ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –∏ —É–º–Ω–∞—è
      'nousresearch/nous-capybara-7b:free',     // –£–º–Ω–∞—è Nous
      'teknium/openhermes-2.5-mistral-7b:free', // –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    ]

    for (let modelIndex = 0; modelIndex < models.length; modelIndex++) {
      for (let keyAttempt = 0; keyAttempt < Math.min(3, this.openrouterKeys.length); keyAttempt++) {
        try {
          const apiKey = this.getNextOpenRouterKey()
          
          const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${apiKey}`,
              'Content-Type': 'application/json',
              'HTTP-Referer': 'https://localhost:3000',
              'X-Title': 'Jarvis AI Assistant'
            },
            body: JSON.stringify({
              model: models[modelIndex],
              messages: allMessages,
              temperature: 0.7,
              max_tokens: 2000,
              top_p: 0.9,
              frequency_penalty: 0.1,
              presence_penalty: 0.1
            })
          })

          if (!response.ok) {
            console.error(`OpenRouter error (model: ${models[modelIndex]}, key ${keyAttempt + 1}):`, response.status, response.statusText)
            continue
          }

          const data = await response.json()
          
          if (data.choices && data.choices[0] && data.choices[0].message) {
            return data.choices[0].message.content
          }
          
          throw new Error('Invalid response format from OpenRouter')
        } catch (error) {
          console.error(`OpenRouter attempt failed (model: ${models[modelIndex]}, key ${keyAttempt + 1}):`, error)
        }
      }
    }
    
    throw new Error('All OpenRouter models and keys failed')
  }

  private async makeGroqRequest(messages: AIMessage[]): Promise<string> {
    const systemPrompt: AIMessage = {
      role: 'system',
      content: `–¢—ã Jarvis - –ø—Ä–æ—Å—Ç–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI.

–ì–õ–ê–í–ù–û–ï:
- –û—Ç–≤–µ—á–∞–π –ö–û–†–û–¢–ö–û –∏ –ï–°–¢–ï–°–¢–í–ï–ù–ù–û
- –ö–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫
- –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–∏ –º–Ω–æ–≥–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
- –û–î–ò–ù –æ—Ç–≤–µ—Ç = –û–î–ù–ê –º—ã—Å–ª—å

–ü–†–ò–ú–ï–†–´:
- "–ü—Ä–∏–≤–µ—Ç!"
- "–û—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?"
- "–ö–æ–Ω–µ—á–Ω–æ!"
- "–ü–æ–º–æ–≥—É!"

–ù–ï –î–ï–õ–ê–ô:
- "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞–¥ –≤–∏–¥–µ—Ç—å! –ê –∫–∞–∫ —Ç—ã?"
- –î–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
- –ú–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ä–∞–∑—É

–Ø–ó–´–ö:
- –¢–û–õ–¨–ö–û —Ä—É—Å—Å–∫–∏–π
- –ü—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞
- –ö–∞–∫ –≤ —á–∞—Ç–µ —Å –¥—Ä—É–≥–æ–º

–û—Ç–≤–µ—á–∞–π –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ –¥–µ–ª—É.`
    }

    const allMessages = [systemPrompt, ...messages]

    // –°–∞–º—ã–µ —É–º–Ω—ã–µ –º–æ–¥–µ–ª–∏ Groq (–ë–ï–ó –õ–ò–ú–ò–¢–û–í!)
    const models = [
      'llama-3.1-70b-versatile',     // –¢–æ–ø 70B –º–æ–¥–µ–ª—å - –æ—á–µ–Ω—å —É–º–Ω–∞—è!
      'llama3-70b-8192',             // –ö–ª–∞—Å—Å–Ω–∞—è 70B
      'mixtral-8x7b-32768',          // Mixtral - —Å—É–ø–µ—Ä –¥–ª—è —á–∞—Ç–∞
      'llama-3.1-8b-instant',       // –ë—ã—Å—Ç—Ä–∞—è –Ω–æ —É–º–Ω–∞—è 8B
      'llama3-8b-8192',              // –ù–∞–¥–µ–∂–Ω–∞—è 8B
      'gemma-7b-it',                 // Gemma –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    ]

    for (const model of models) {
      try {
        const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${this.groqKey}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            model: model,
            messages: allMessages,
            temperature: 0.7,
            max_tokens: 2000,
            top_p: 0.9,
            stream: false,
            stop: null,
            frequency_penalty: 0.1,
            presence_penalty: 0.1
          })
        })

        if (!response.ok) {
          console.error(`Groq API error with model ${model}:`, response.status, response.statusText)
          continue
        }

        const data = await response.json()
        
        if (data.choices && data.choices[0] && data.choices[0].message) {
          return data.choices[0].message.content
        }
        
        throw new Error(`Invalid response format from Groq with model ${model}`)
      } catch (error) {
        console.error(`Groq request failed with model ${model}:`, error)
      }
    }
    
    throw new Error('All Groq models failed')
  }

  private async makeHuggingFaceRequest(messages: AIMessage[]): Promise<string> {
    // –ü—Ä–æ—Å—Ç–æ–π fallback –±–µ–∑ HuggingFace API –¥–ª—è –Ω–∞—á–∞–ª–∞
    throw new Error('HuggingFace fallback not implemented yet')
  }

  async generateResponse(messages: AIMessage[]): Promise<string> {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    if (this.openrouterKeys.length === 0 && !this.groqKey) {
      return '–ü—Ä–∏–≤–µ—Ç! –ö–∞ÔøΩÔøΩ –¥–µ–ª–∞? –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ AI. –ù–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ —Ä–∞–¥ –æ–±—â–µ–Ω–∏—é! üòä'
    }

    // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º OpenRouter —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
    if (this.openrouterKeys.length > 0) {
      try {
        const response = await this.makeOpenRouterRequest(messages)
        return this.validateRussianResponse(response)
      } catch (openRouterError) {
        console.log('OpenRouter failed, trying Groq...', openRouterError)
      }
    }

    // 2. –ï—Å–ª–∏ OpenRouter –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º Groq
    if (this.groqKey) {
      try {
        const response = await this.makeGroqRequest(messages)
        return this.validateRussianResponse(response)
      } catch (groqError) {
        console.log('Groq also failed...', groqError)
      }
    }

    // 3. –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
    console.error('All AI providers failed')
    return '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ —è —Å—Ç–∞—Ä–∞—é—Å—å –∏—Ö —Ä–µ—à–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ! üòä'
  }
}

export const aiService = new AIService()
export type { AIMessage }
